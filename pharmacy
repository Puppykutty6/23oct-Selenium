package pages;

import java.io.File;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import coreUtilities.utils.CommonEvents;

public class pharmacy_Pages extends StartupPage {

//	PLease write all the required locators here

	String pageName = this.getClass().getSimpleName();
	private WebDriverWait wait;
	private CommonEvents common;

	// Simple locator hints used across methods (adjust if your DOM differs)
	private By usernameInput = By.id("username");
	private By passwordInput = By.id("password");
	private By signInButton = By.xpath("//button[contains(normalize-space(),'Sign In') or contains(.,'Sign In')]");
	private By homePageLogo = By.cssSelector("a.navbar-brand, img.brand-logo");
	private By pharmacyMenuItem = By.xpath("//*[text()[contains(.,'Pharmacy')]] | //a[contains(@href,'Pharmacy') and (text() = 'Pharmacy' or contains(text(),'Pharmacy'))]");
	private By pharmacySubmoduleList = By.xpath("//div[contains(@class,'sidebar')]//a[contains(.,'Pharmacy')]/ancestor::li//ul//li | //nav//a[contains(@href,'Pharmacy')]/../..//li");
	private By orderTab = By.xpath("//a[contains(.,'Order') or contains(text(),'Order')]");
	private By supplierTab = By.xpath("//a[contains(.,'Supplier') or contains(text(),'Supplier')]");
	private By showDetailsButton = By.xpath("//button[contains(text(),'Show Details')]");
	private By addNewGoodReceiptButton = By.xpath("//button[contains(.,'Add New Good Receipt') or contains(.,'New Good Receipt')]");
	private By addNewItemButton = By.xpath("//button[contains(.,'Add New Item') or contains(.,'+Add New Item')]");
	private By saveItemButton = By.xpath("//button[contains(.,'Save') and contains(@class,'save') or contains(.,'Save')]");
	private By printReceiptButton = By.xpath("//button[contains(.,'Print Receipt')]");
	private By closeModalButtonXpath = By.xpath("//button[contains(.,'Close') or contains(.,'Cancel') or contains(@class,'close')]");
	private By messageParagraph = By.xpath("//p[contains(@class,'main-message') or contains(@class,'message') or contains(.,'Please') or contains(.,'Saved')]");
	private By searchBar = By.id("quickFilterInput");
	private By fromDateInput = By.xpath("//input[contains(@placeholder,'From') or contains(@id,'fromDate') or contains(@name,'from')]");
	private By toDateInput = By.xpath("//input[contains(@placeholder,'To') or contains(@id,'toDate') or contains(@name,'to')]");
	private By okDateButton = By.xpath("//button[contains(.,'OK') or contains(.,'Ok') or contains(.,'Apply')]");

	public pharmacy_Pages(WebDriver driver) {
		super(driver);
		this.wait = new WebDriverWait(driver, Duration.ofSeconds(15));
		this.common = new CommonEvents(driver);
	}

	private void highlight(WebElement el) {
		try {
			common.highlightElement(el);
		} catch (Exception e) {
			// ignore
		}
	}

	private WebElement safeFind(By by) {
		return wait.until(ExpectedConditions.visibilityOfElementLocated(by));
	}

	/**
	 * @Test1.1 about this method loginTohealthAppByGivenValidCredetial()
	 */
	public boolean loginToHealthAppByGivenValidCredetial(Map<String, String> expectedData) throws Exception {
		// Attempt several locator strategies to find username/password
		try {
			// navigate to url if provided in map
			if (expectedData != null && expectedData.containsKey("url")) {
				common.navigateTo(expectedData.get("url"));
			}
			WebElement userEl = null;
			WebElement passEl = null;
			try { userEl = safeFind(usernameInput); } catch (Exception e) { /* fallback */ }
			try { passEl = safeFind(passwordInput); } catch (Exception e) { /* fallback */ }

			// fallback locator attempts
			if (userEl == null) {
				List<By> attempts = Arrays.asList(
						By.name("username"),
						By.xpath("//input[@type='text' and (contains(@placeholder,'user') or contains(@placeholder,'Username'))]"),
						By.xpath("//input[contains(@id,'user')]")
				);
				for (By b : attempts) {
					try { userEl = wait.until(ExpectedConditions.visibilityOfElementLocated(b)); break; } catch (Exception ignored) {}
				}
			}
			if (passEl == null) {
				List<By> attempts = Arrays.asList(
						By.name("password"),
						By.xpath("//input[@type='password']"),
						By.xpath("//input[contains(@id,'pass')]")
				);
				for (By b : attempts) {
					try { passEl = wait.until(ExpectedConditions.visibilityOfElementLocated(b)); break; } catch (Exception ignored) {}
				}
			}

			if (userEl == null || passEl == null) {
				System.out.println("Login inputs not found.");
				return false;
			}

			String user = expectedData.getOrDefault("username", expectedData.getOrDefault("user", "admin"));
			String pass = expectedData.getOrDefault("password", expectedData.getOrDefault("pass", "pass123"));

			highlight(userEl);
			userEl.clear();
			userEl.sendKeys(user);
			highlight(passEl);
			passEl.clear();
			passEl.sendKeys(pass);

			// click sign in
			try {
				WebElement signIn = wait.until(ExpectedConditions.elementToBeClickable(signInButton));
				highlight(signIn);
				signIn.click();
			} catch (Exception e) {
				// try press Enter on password field
				passEl.sendKeys(Keys.ENTER);
			}

			// wait for post-login element - dashboard title or something
			Thread.sleep(1000); // small pause to let page change
			return true;
		} catch (Exception e) {
			throw new Exception("loginToHealthAppByGivenValidCredetial failed: " + e.getMessage(), e);
		}
	}
	/**
	 * @Test1.2
	 */
	public void clickOnHomePageLogo() {
		try {
			WebElement logo = wait.until(ExpectedConditions.visibilityOfElementLocated(homePageLogo));
			highlight(logo);
			logo.click();
		} catch (Exception e) {
			// try alternative: click on element with title 'Home' or link to Home/Index
			try {
				WebElement alt = driver.findElement(By.xpath("//a[contains(@href,'Home/Index') or contains(.,'Home')]"));
				highlight(alt);
				alt.click();
			} catch (Exception ex) {
				// ignore if still failing
			}
		}
	}


	/**
	 * @Test1.3 verifyTitleOfThePage
	 */
	public String verifyTitleOfThePage() throws Exception {
		try {
			// ensure page loaded
			common.waitForPageLoad();
			return driver.getTitle();
		} catch (Exception e) {
			throw new Exception("verifyTitleOfThePage failed: " + e.getMessage(), e);
		}
	}

	/**
	 * @Test1.4 verifyURLOfThePage
	 */
	public String verifyURLOfThePage() throws Exception {
		try {
			return driver.getCurrentUrl();
		} catch (Exception e) {
			throw new Exception("verifyURLOfThePage failed: " + e.getMessage(), e);
		}
	}

	/**
	 * @Test2.1 scrollDownAndClickPharmacyTab
	 */
	public void scrollDownAndClickPharmacyTab() throws Exception {
		try {
			// attempt to find the Pharmacy menu item and click
			WebElement pharmacy = wait.until(ExpectedConditions.visibilityOfElementLocated(pharmacyMenuItem));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", pharmacy);
			highlight(pharmacy);
			pharmacy.click();
			// wait for page to navigate
			common.waitForPageLoad();
		} catch (Exception e) {
			throw new Exception("scrollDownAndClickPharmacyTab failed: " + e.getMessage(), e);
		}
	}

	/**
	 * @Test2.2 getPharmacyPageUrl
	 */
	public String getPharmacyPageUrl() throws Exception {
		return driver.getCurrentUrl();
	}

	/**
	 * @Test3 verifyAndHighlightPharmacySubModulesTab
	 */
	public boolean verifyAndHighlightPharmacySubModulesTab(String tabName) throws Exception {
		try {
			// We will search for an anchor or element containing the tabName text under Pharmacy section
			By tabLocator = By.xpath("//*[contains(@class,'pharmacy')]/descendant::a[contains(normalize-space(.),'" + tabName + "')]"
					+ " | //a[contains(normalize-space(.),'" + tabName + "') and contains(@href,'Pharmacy')]"
					+ " | //nav//a[contains(normalize-space(.),'" + tabName + "')]"
					+ " | //li//a[contains(normalize-space(.),'" + tabName + "')]");

			WebElement tab = wait.until(ExpectedConditions.visibilityOfElementLocated(tabLocator));
			highlight(tab);
			return tab.isDisplayed();
		} catch (Exception e) {
			// not found
			return false;
		}
	}

	/**
	 * @Test4.1 visitTabUnderPharmacy
	 */
	public void visitTabUnderPharmacy(String tabName) throws Exception {
		try {
			// Ensure pharmacy is opened
			try {
				WebElement ph = wait.until(ExpectedConditions.visibilityOfElementLocated(pharmacyMenuItem));
				// if the pharmacy menu is collapsed, click it
				if (ph != null) {
					// open if necessary
					try { ph.click(); } catch (Exception ignored) {}
				}
			} catch (Exception ignored) {}

			By tabLocator = By.xpath("//a[contains(normalize-space(.),'" + tabName + "')]");
			WebElement tab = wait.until(ExpectedConditions.elementToBeClickable(tabLocator));
			highlight(tab);
			tab.click();
			common.waitForPageLoad();
		} catch (Exception e) {
			throw new Exception("visitTabUnderPharmacy failed for '" + tabName + "': " + e.getMessage(), e);
		}
	}

	/**
	 * @Test4.2 isOrderTabSelected
	 */
	public boolean isOrderTabSelected() throws Exception {
		try {
			WebElement el = wait.until(ExpectedConditions.visibilityOfElementLocated(orderTab));
			// check class contains 'active' or aria-selected true
			String cls = el.getAttribute("class");
			String aria = el.getAttribute("aria-selected");
			return (cls != null && cls.toLowerCase().contains("active")) || "true".equalsIgnoreCase(aria);
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * @Test4.3 areSubTabsUnderOrderPresent
	 */
	public boolean areSubTabsUnderOrderPresent() throws Exception {
		try {
			// We expect presence of Purchase Order and Goods Receipt tabs as per spec
			By purchaseOrder = By.xpath("//a[contains(text(),'Purchase Order')]");
			By goodsReceipt = By.xpath("//a[contains(text(),'Goods Receipt') or contains(text(),'Goods Receipt')]");
			boolean p = !driver.findElements(purchaseOrder).isEmpty();
			boolean g = !driver.findElements(goodsReceipt).isEmpty();
			return p && g;
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * @Test4.4 isSearchBarPresent
	 */
	public boolean isSearchBarPresent() throws Exception {
		try {
			WebElement sb = wait.until(ExpectedConditions.visibilityOfElementLocated(searchBar));
			highlight(sb);
			return sb.isDisplayed();
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * @Test4.5 areDateDropdownsPresent
	 */
	public boolean areDateDropdownsPresent() throws Exception {
		try {
			WebElement from = wait.until(ExpectedConditions.visibilityOfElementLocated(fromDateInput));
			WebElement to = wait.until(ExpectedConditions.visibilityOfElementLocated(toDateInput));
			highlight(from);
			highlight(to);
			return from.isDisplayed() && to.isDisplayed();
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * @Test4.6 isSelectSupplierDropdownPresent
	 */
	public boolean isSelectSupplierDropdownPresent() throws Exception {
		try {
			WebElement supplier = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@placeholder='select supplier' or contains(@placeholder,'supplier')]")));
			highlight(supplier);
			return supplier.isDisplayed();
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * @Test5.2 verifySelectedTabIsActiveOrNot
	 */
	public String verifySelectedTabIsActiveOrNot() throws Exception {
		try {
			WebElement supplier = wait.until(ExpectedConditions.visibilityOfElementLocated(supplierTab));
			highlight(supplier);
			String cls = supplier.getAttribute("class");
			return cls == null ? "" : cls;
		} catch (Exception e) {
			return "";
		}
	}

	/**
	 * @Test6.2 clickButtonByText
	 */
	public void clickButtonByText(String buttonText) throws Exception {
		try {
			By btn = By.xpath("//button[contains(normalize-space(.),'" + buttonText + "')] | //a[contains(normalize-space(.),'" + buttonText + "')] | //span[contains(normalize-space(.),'" + buttonText + "')]");
			WebElement button = wait.until(ExpectedConditions.elementToBeClickable(btn));
			highlight(button);
			button.click();
		} catch (Exception e) {
			throw new Exception("clickButtonByText('" + buttonText + "') failed: " + e.getMessage(), e);
		}
	}

	/**
	 * @Test6.3 clickPrintReceipt
	 */
	public void clickPrintReceipt() throws Exception {
		try {
			WebElement pr = wait.until(ExpectedConditions.elementToBeClickable(printReceiptButton));
			highlight(pr);
			pr.click();
		} catch (Exception e) {
			// fallback: find by text 'Print'
			try {
				WebElement pr2 = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[contains(.,'Print') or contains(.,'Print Receipt')]")));
				highlight(pr2);
				pr2.click();
			} catch (Exception ex) {
				throw new Exception("clickPrintReceipt failed: " + ex.getMessage(), ex);
			}
		}
	}

	/**
	 * @Test6.4 verifyMessageByText
	 */
	public String verifyMessageByText(String messageText) throws Exception {
		try {
			By m = By.xpath("//p[contains(normalize-space(.),'" + messageText + "')] | //div[contains(@class,'notification') and contains(.,'" + messageText + "')] | //p[contains(@class,'main-message')]");
			WebElement el = wait.until(ExpectedConditions.visibilityOfElementLocated(m));
			highlight(el);
			return el.getText().trim();
		} catch (Exception e) {
			throw new Exception("verifyMessageByText failed to find message: " + messageText, e);
		}
	}

	/**
	 * @Test6.5 closeAddGoodReceiptModal
	 */
	public boolean closeAddGoodReceiptModal() throws Exception {
		try {
			WebElement close = wait.until(ExpectedConditions.elementToBeClickable(closeModalButtonXpath));
			highlight(close);
			close.click();
			// wait until modal disappears
			Thread.sleep(500);
			return true;
		} catch (Exception e) {
			// fallback: try clicking any "x" close in modal
			try {
				WebElement alt = driver.findElement(By.xpath("//a[contains(@class,'history-del-btn') or contains(@class,'close-modal') or contains(.,'×')]"));
				highlight(alt);
				alt.click();
				return true;
			} catch (Exception ex) {
				return false;
			}
		}
	}

	/**
	 * @Test7.4 addGriItemWithMandatoryFieldsOnly
	 */
	public void addGriItemWithMandatoryFieldsOnly(String itemName, String batchNumber, String quantity, String rate,
			String mrp) throws Exception {
		try {
			// Wait for modal form to appear - attempt typical field placeholders
			By itemNameLocator = By.xpath("//input[contains(@placeholder,'Item') or contains(@name,'item') or contains(@id,'item')]");
			By batchNumberLocator = By.xpath("//input[contains(@placeholder,'Batch') or contains(@name,'batch') or contains(@id,'batch')]");
			By expiryLocator = By.xpath("//input[contains(@placeholder,'Expiry') or contains(@name,'expiry') or contains(@id,'expiry')]");
			By qtyLocator = By.xpath("//input[contains(@placeholder,'Qty') or contains(@name,'quantity') or contains(@id,'qty')]");
			By rateLocator = By.xpath("//input[contains(@placeholder,'Rate') or contains(@name,'rate') or contains(@id,'rate')]");
			By mrpLocator = By.xpath("//input[contains(@placeholder,'MRP') or contains(@name,'mrp') or contains(@id,'mrp')]");
			
			if (itemName != null) {
				WebElement itemEl = wait.until(ExpectedConditions.visibilityOfElementLocated(itemNameLocator));
				highlight(itemEl);
				itemEl.clear();
				itemEl.sendKeys(itemName);
			}
			if (batchNumber != null) {
				WebElement batchEl = wait.until(ExpectedConditions.visibilityOfElementLocated(batchNumberLocator));
				highlight(batchEl);
				batchEl.clear();
				batchEl.sendKeys(batchNumber);
			}
			// expiry - set 1 year from now as default if field exists
			try {
				WebElement expiryEl = wait.until(ExpectedConditions.visibilityOfElementLocated(expiryLocator));
				highlight(expiryEl);
				if (!expiryEl.getAttribute("value").trim().isEmpty()) {
					// leave as is
				} else {
					LocalDate d = LocalDate.now().plusYears(1);
					String formatted = d.format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
					expiryEl.sendKeys(formatted);
				}
			} catch (Exception ignored) {}

			if (quantity != null) {
				WebElement qty = wait.until(ExpectedConditions.visibilityOfElementLocated(qtyLocator));
				highlight(qty);
				qty.clear();
				qty.sendKeys(quantity);
			}
			if (rate != null) {
				WebElement r = wait.until(ExpectedConditions.visibilityOfElementLocated(rateLocator));
				highlight(r);
				r.clear();
				r.sendKeys(rate);
			}
			if (mrp != null) {
				WebElement mEl = wait.until(ExpectedConditions.visibilityOfElementLocated(mrpLocator));
				highlight(mEl);
				mEl.clear();
				mEl.sendKeys(mrp);
			}

			// Click Save
			try {
				WebElement save = wait.until(ExpectedConditions.elementToBeClickable(saveItemButton));
				highlight(save);
				save.click();
			} catch (Exception e) {
				// try any button with text Save
				WebElement save2 = driver.findElement(By.xpath("//button[normalize-space()='Save']"));
				highlight(save2);
				save2.click();
			}
			// wait small time for save to process
			Thread.sleep(800);
		} catch (Exception e) {
			throw new Exception("addGriItemWithMandatoryFieldsOnly failed: " + e.getMessage(), e);
		}
	}

	/**
	 * @Test7.5 enterMandatoryDetailsToPrintGoodReceipt
	 */
	public void enterMandatoryDetailsToPrintGoodReceipt(String invoiceNumber) throws Exception {
		try {
			// select supplier dropdown
			WebElement supplierDropdown = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@placeholder='select supplier' or contains(@placeholder,'supplier')]")));
			highlight(supplierDropdown);
			supplierDropdown.click();
			// choose first option
			try {
				WebElement firstOption = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[contains(@class,'options') or contains(@class,'dropdown')]//li[1] | //ul[contains(@class,'dropdown-menu')]//li[1]")));
				highlight(firstOption);
				firstOption.click();
			} catch (Exception ignored) {}

			// invoice number field
			WebElement inv = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[contains(@placeholder,'Invoice') or contains(@name,'invoice') or contains(@id,'invoice')]")));
			highlight(inv);
			inv.clear();
			inv.sendKeys(invoiceNumber);

			// payment mode dropdown - select first available if exists
			try {
				WebElement pm = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//select[contains(@name,'payment') or contains(@id,'payment')]|//input[contains(@placeholder,'Payment')]")));
				highlight(pm);
				pm.click();
				// if it's select tag, choose first option
				if (pm.getTagName().equalsIgnoreCase("select")) {
					List<WebElement> opts = pm.findElements(By.tagName("option"));
					if (opts.size() > 1) opts.get(1).click();
				} else {
					// click first suggestion
					try {
						WebElement opt = driver.findElement(By.xpath("//ul[contains(@class,'dropdown-menu')]//li[1]"));
						opt.click();
					} catch (Exception ignored) {}
				}
			} catch (Exception ignored) {}

			// Click Print Receipt
			clickPrintReceipt();

			// small wait
			Thread.sleep(500);
		} catch (Exception e) {
			throw new Exception("enterMandatoryDetailsToPrintGoodReceipt failed: " + e.getMessage(), e);
		}
	}

	/**
	 * @Test 8.1 : Close modal by its subject name
	 */
	public void closeModalBySubjectName(String modalTitle) throws Exception {
		try {
			By modalBy = By.xpath("//div[contains(@class,'modal') and descendant::h4[contains(normalize-space(.),'" + modalTitle + "')]] | //div[contains(@class,'modal') and .//h5[contains(.,'" + modalTitle + "')]]");
			WebElement modal = wait.until(ExpectedConditions.visibilityOfElementLocated(modalBy));
			// find cancel button inside modal
			WebElement cancel = modal.findElement(By.xpath(".//button[con
