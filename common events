package coreUtilities.utils;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;

public class CommonEvents 
{
	public WebDriver driver;
	private WebDriverWait wait;

	public CommonEvents(WebDriver driver) 
	{
		this.driver = driver;
		this.wait = new WebDriverWait(driver, Duration.ofSeconds(15));
	}

	/**
	 * Navigate to a URL (wrapper) and wait for document.readyState == complete
	 */
	public CommonEvents navigateTo(String url) throws Exception
	{
		if (url == null) throw new IllegalArgumentException("url cannot be null");
		driver.get(url);
		// wait for page load
		waitForPageLoad();
		return this;
	}
	
	public void waitForPageLoad() {
	    try {
	        new WebDriverWait(driver, Duration.ofSeconds(20)).until(webDriver -> {
	            try {
	                String readyState = ((JavascriptExecutor) webDriver).executeScript("return document.readyState").toString();
	                return "complete".equals(readyState);
	            } catch (Exception e) {
	                return false;
	            }
	        });
	    } catch (Exception e) {
	        // swallow; best-effort
	    }
	}
	
	/**
	 * highlight element (temporary) using JS
	 */
	public void highlightElement(WebElement el) {
	    try {
	        JavascriptExecutor js = (JavascriptExecutor) driver;
	        String origStyle = el.getAttribute("style");
	        js.executeScript("arguments[0].setAttribute('style', arguments[1]);", el,
	                "border: 3px solid red; border-style: dashed; box-shadow: 0 0 5px red;");
	        // sleep briefly so highlight is visible (non-blocking as minimal)
	        Thread.sleep(250);
	        // revert
	        js.executeScript("arguments[0].setAttribute('style', arguments[1]);", el,
	                origStyle == null ? "" : origStyle);
	    } catch (Exception e) {
	        // ignore highlight errors
	    }
	}
	
	/**
	 * safe click with wait
	 */
	public void safeClick(By by) {
	    try {
	        WebElement el = wait.until(ExpectedConditions.elementToBeClickable(by));
	        highlightElement(el);
	        el.click();
	    } catch (Exception e) {
	        // rethrow as runtime to avoid checked exceptions in utility
	        throw new RuntimeException("Failed to click on element: " + by.toString(), e);
	    }
	}
}
